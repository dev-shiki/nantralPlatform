name: AI-Powered Quality Test

on:
  # Jalankan manual dari GitHub UI
  workflow_dispatch:
  # Jalankan pada setiap push ke branch feature
  push:
    branches:
      - 'feature/**'
      - 'fix/**'

jobs:
  code-quality-test:
    name: Code Quality Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Dibutuhkan untuk SonarQube

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov flake8 openai requests

      - name: Run basic lint with Flake8
        run: |
          # Jalankan flake8 dengan pengaturan dasar
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Tingkat kesalahan fleksibel untuk pengujian awal
          flake8 . --count --exit-zero --max-complexity=10 --statistics

      - name: Run tests with pytest
        run: |
          # Cari file test yang tersedia dan jalankan
          python -m pytest --cov=. --cov-report=xml

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }}
            -Dsonar.projectName=${{ github.repository_owner }}_${{ github.event.repository.name }}

      - name: Fetch SonarQube issues
        id: fetch-issues
        run: |
          # Ambil token dari secrets
          SONAR_TOKEN="${{ secrets.SONAR_TOKEN }}"
          SONAR_HOST_URL="${{ secrets.SONAR_HOST_URL }}"
          PROJECT_KEY="${{ github.repository_owner }}_${{ github.event.repository.name }}"
          
          # Tunggu beberapa detik untuk memastikan analisis SonarQube selesai
          sleep 10
          
          # Ambil isu dari SonarQube API
          curl -u "${SONAR_TOKEN}:" \
            "${SONAR_HOST_URL}/api/issues/search?projectKeys=${PROJECT_KEY}&statuses=OPEN,CONFIRMED&types=CODE_SMELL,BUG,VULNERABILITY" \
            > sonar_issues.json
            
          # Ambil data cakupan kode
          curl -u "${SONAR_TOKEN}:" \
            "${SONAR_HOST_URL}/api/measures/component?component=${PROJECT_KEY}&metricKeys=coverage,lines_to_cover,uncovered_lines" \
            > code_coverage.json
            
          # Tampilkan ringkasan hasil
          echo "Hasil analisis SonarQube:"
          jq '.total' sonar_issues.json
          echo "Coverage:"
          jq '.component.measures[] | select(.metric=="coverage")' code_coverage.json
